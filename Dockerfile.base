FROM nvidia/cuda:11.1.1-cudnn8-devel-ubuntu20.04
# use an older system (18.04) to avoid opencv incompatibility (issue#3524)

ENV DEBIAN_FRONTEND noninteractive
# must use apt update for after ros install
RUN apt update
RUN apt-get install -y lsb-release
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
RUN apt update

RUN apt-get install -y \
    ca-certificates git wget sudo ninja-build \
	iputils-ping net-tools netcat
RUN apt-get install -y python3-opencv
# RUN apt-get install -y python3.7 python3.7-dev python3.7-distutils
# RUN apt-get install -y python3.8 python3.8-dev python3.8-distutils

# Install ROS
RUN apt-get install -y --allow-downgrades --allow-remove-essential --allow-change-held-packages \
	libpcap-dev libopenblas-dev \
	gstreamer1.0-tools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev \
	ros-noetic-desktop-full python3-rosdep python3-rosinstall-generator python3-vcstool build-essential \
	python3-catkin-tools
RUN apt-get clean && rm -rf /var/lib/apt/lists/*
RUN rosdep init && rosdep update 

# Make python3 available for python3.7
# RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1
# RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2
# RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 2
# RUN update-alternatives --config python3
# Make python available for python3.7
# RUN ln -sv /usr/bin/python3.7 /usr/bin/python
RUN ln -sv /usr/bin/python3.8 /usr/bin/python

# create a non-root user
ARG USER_ID=1000
RUN useradd -m --no-log-init --system  --uid ${USER_ID} appuser -g sudo
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
USER appuser
WORKDIR /home/appuser/workspace

# Configure ROS
RUN echo "source /opt/ros/noetic/setup.bash" >> /home/appuser/.bashrc
RUN echo "export ROSLAUNCH_SSH_UNKNOWN=1" >> /home/appuser/.bashrc
RUN echo "source /opt/ros/noetic/setup.zsh" >> /home/appuser/.zshrc
RUN echo "export ROSLAUNCH_SSH_UNKNOWN=1" >> /home/appuser/.zshrc

ENV PATH="/home/appuser/.local/bin:${PATH}"
RUN wget https://bootstrap.pypa.io/pip/get-pip.py && \
	# python3.7 get-pip.py --user && \
	python3.8 get-pip.py --user && \
	rm get-pip.py

# Important! Otherwise, it uses existing numpy from host-modules which throws error
RUN pip install --user numpy==1.20.3

# install dependencies
# See https://pytorch.org/ for other options if you use a different version of CUDA
RUN pip install --user tensorboard cmake   # cmake from apt-get is too old
RUN pip install --user torch==1.10 torchvision==0.11.1 -f https://download.pytorch.org/whl/cu111/torch_stable.html
RUN pip install --user opencv-python

RUN pip install --user 'git+https://github.com/facebookresearch/fvcore'
# install detectron2
RUN git clone https://github.com/facebookresearch/detectron2 detectron2_repo
# set FORCE_CUDA because during `docker build` cuda is not accessible
ENV FORCE_CUDA="1"
# This will by default build detectron2 for all common cuda architectures and take a lot more time,
# because inside `docker build`, there is no way to tell which architecture will be used.
ARG TORCH_CUDA_ARCH_LIST="Kepler;Kepler+Tesla;Maxwell;Maxwell+Tegra;Pascal;Volta;Turing"
ENV TORCH_CUDA_ARCH_LIST="${TORCH_CUDA_ARCH_LIST}"

RUN pip install --user -e detectron2_repo

# Set a fixed model cache directory.
ENV FVCORE_CACHE="/tmp"
WORKDIR /home/appuser/workspace/detectron2_repo

CMD ["/bin/bash"]